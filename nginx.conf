# Main server configuration
server {
    listen 80;
    server_name _;
    
    # Security headers
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options DENY always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    
    # Content Security Policy
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://apis.google.com https://www.gstatic.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://identitytoolkit.googleapis.com https://securetoken.googleapis.com https://firestore.googleapis.com wss://firestore.googleapis.com; frame-src 'self' https://accounts.google.com;" always;

    root /usr/share/nginx/html;
    index index.html;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Serve runtime configuration file
    location = /config.js {
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Content-Type "application/javascript";
        try_files $uri =404;
    }
    
    location = /sw.js {
        return 404;
        access_log off;
        error_log off;
    }

    # Cache versioned static assets aggressively (with hash in filename)
    location ~* \.(css|js|woff2?|eot|ttf|otf)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        access_log off;
        
        # Enable CORS for fonts
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

    # Cache images with validation
    location ~* \.(ico|gif|jpe?g|png|svg|webp|avif)$ {
        expires 30d;
        add_header Cache-Control "public, must-revalidate";
        add_header Vary "Accept-Encoding";
        access_log off;
        
        # Try to serve WebP/AVIF if browser supports it
        location ~* \.(jpe?g|png)$ {
            add_header Vary "Accept";
            try_files $uri$webp_suffix $uri =404;
        }
    }

    # Cache manifest and other app files with validation
    location ~* \.(json|xml|txt)$ {
        expires 1d;
        add_header Cache-Control "public, must-revalidate";
        add_header Vary "Accept-Encoding";
    }

    # No cache for HTML files to ensure updates are picked up
    location ~* \.html$ {
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Vary "Accept-Encoding";
    }

    # API endpoints - no cache
    location /api/ {
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
    }

    # Main application route with cache busting for SPA
    location / {
        try_files $uri $uri/ /index.html;
        
        # For the main index.html, ensure no caching
        location = /index.html {
            expires -1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Vary "Accept-Encoding";
        }
    }

    # Health check endpoint for Cloud Run
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Security: Hide nginx version
    server_tokens off;

    # Security: Limit request size
    client_max_body_size 10M;
}

# WebP support detection
map $http_accept $webp_suffix {
    "~*webp" ".webp";
}

# Rate limiting zones
limit_req_status 429;
limit_conn_status 429;
